searchState.loadedDescShard("deaf", 0, "An ELF formatted binary file\nA Section extracted from an ELF file\nA Segment extracted from an ELF file\nGet the size of the segment body\nCommon structs and types used by all other modules\nCheck if the segment contains the given section\nGet the ending byte offset of the segment body\nA custom error type that aggregates internal errors\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFile, program and section header definitions\nCheck if the segment includes the given section\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the layout of the file (little or big endian)\nCreate a new segment from a program header\nCreate a new section from a program header\nGet the offset of the segment in the data\nCheck if the segment overlaps the given section\nGet the size of program headers\nGet the number of program headers in the file\nGet the offset of the program header table\nRead a section, given a header and data\nRead all segments from the given data\nParse all sections for a byte array given count, offset …\nGet the sections for the segment\nGet the mutable sections for the segment\nGet the size of section headers\nGet the number of section headers in the file\nGet the offset of the section header table\nAlias for offset\nGet all string tables except the ‘shstrtab’\nVarious types of tables and associated table items\nUtility functions for both testing and execution\nGet the addressing width of the file (32, 64 etc)\nWrite a section, given mutable data and offset\nPlaceholder target for Update\nAny section type\nBig endian (e.g. 0xABCD is represented as ‘AB CD’ )\nThe delimiter used to determine the ending index of …\nAn iterator that uses a delimiting value or length to …\nConvert a value into another value\nDynamic linking information (SHT_DYNAMIC)\nDynamic symbol table section (SHT_DYNSYM)\nCore dump file\nShared object file\nExecutable file\nUpper bound of OS-specific values\nUpper bound of processor-specific values\nLower bound of OS-specific values\nLower bound of processor-specific values\nUnknown file type\nRelocatable file\nSection with no content (SHT_NOBITS)\nExtended symbol table index (SHT_SYMTAB_SHNDX)\nA single field in a section, table item etc.\nArray of pointers to termination functions (SHT_FINI_ARRAY)\nParse an object from bytes\nGNU-specific hash table (SHT_GNU_HASH)\nGNU-specific list of libraries to be pre-linked …\nOS-specific segment to be made read-only after linking\nIdentifies an interrelated group of sections (SHT_GROUP)\nSymbol hash table section (SHT_HASH)\nArray of pointers to initialization functions …\nConvert an object into bytes\nAn item in a section, table item etc that contains a field …\nAn array of items in a section\nThe endianness of the ELF file\nLittle endian (e.g. 0xABCD is represented as ‘CD AB’)\nGeneral notes about the object file (SHT_NOTE)\nSection is inactive (SHT_NULL)\nThe object file type\nThe type of a program header\nDynamic linking information\nEntry contains the location and size of exception handling …\nOS-specific location of .note.gnu.property section for …\nUsed to indicate whether the stack should be executable …\nUpper bound of OS-specific types\nUpper bound of processor-specific types\nEntry contains size and location of a path to an …\nLoadable segment\nLower bound of OS-specific types\nLower bound of processor-specific types\nEntry contains size and location of auxiliary information\nProgram header table entry unused\nSegment containing program header table itself\nSegment type is reserved but has unspecified semantics\nThread-Local Storage template\nArray of pointers to preinit functions (SHT_PREINIT_ARRAY)\nInformation defined by the program (SHT_PROGBITS)\nRelocation table index (SHT_REL)\nRelocation table with explicit addends (SHT_RELA)\nReserved section with unspecified semantics (SHT_SHLIB)\nOccupies memory during process execution\nSection is excluded from input to the link-edit of an …\nContains executable machine instructions\nSection is a member, perhaps the only one, of a section …\nThe section header holds a section header table index\nAdd special ordering requirements to the link-editor\nSection has data that may be merged to eliminate …\nSection requires ordering in relation to other sections of …\nSection requires special OS-specific processing\nSection that consists of null-terminated character strings\nSection holds thread-local storage\nData is writable during process execution\nThe flags of a particular section header\nReserved values for section header indices\nSymbols defined relative to this index are not affected by …\nProvide for ordering in conjunction with the …\nProvide for ordering in conjunction with the …\nSections defined relative to this index are …\nAn undefined, missing, irrelevant, or otherwise …\nThe actual section header index is too large to fit in the …\nContains build attributes for ARM systems\nOverlay debug info\nARM unwind info\nGDB and overlay integration info\nContains a pre-emption map that allows symbols to be …\nDynamic linking information\nDynamic symbol table section\nArray of pointers to termination functions\nGNU-specific hash table\nGNU-specific list of libraries to be pre-linked\nIdentifies an interrelated group of sections\nSymbol hash table section\nHigh bound for reserved OS-specific semantics\nArray of pointers to initialization functions\nLow bound for reserved OS-specific semantics\nSection with no content\nGeneral notes about the object file\nSection is inactive\nMarker value for section type iteration\nArray of pointers to preinit functions\nInformation defined by the program\nRelocation table index\nRelocation table with explicit addends\nReserved section with unspecified semantics\nString table section\nSymbol table section\nExtended symbol table index\nThe type of a section header\nSymbols is visible to all object files being combined\nSymbol is not visible outside the object file containing …\nSame as STB_GLOBAL, but lower precedence\nThe binding of a symbol entry from a static or dynamic …\nAn uninitialized common block, treated the same as …\nSymbol gives the name of an associated source file\nSymbol is associated with a function or other executable …\nThe symbol type is not specified\nSymbol is associated with a data object, such as a …\nSymbol is associated with a section\nSymbol is a thread local storage template (value is offset …\nThe type of a symbol entry from a static or dynamic symbol …\nThe visibility is as specified by the symbol binding type\nThis symbol is protected and not externally visible\nThis visibility attribute is currently reserved\nExternal references must be resolved externally\nThe binding of a symbol entry from a static or dynamic …\nThe type of a section (string table, relocation table etc.)\nString table section (SHT_STRTAB)\nSymbol table section (SHT_SYMTAB)\nUnknown section type (SHT_NUM, SHT_LOOS, etc.)\nUnknown p_type value\nUnknown catch-all type\nUpdate for an object of type <code>T</code>\nTrait to add an update function to structs that can be …\nThe mode of the ELF file\nMode of the ELF file is 32-bit\nMode of the ELF file is 64-bit\nAdd a new update for type <code>T</code>\nSet the offset of the array in the parsed data\nApply all updates for type <code>T</code>\nClear all updates of type <code>T</code>\nCount updates of type <code>T</code>\nCreate a new field with an empty range\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRead the buffer and convert into the output value\nGet the output value of the item\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the offset of a particular index in the array\nGet the size of the item for the current width\nGet an iterator over slices of the data\nGet the layout of the field\nGet the layout (little- or big-endian) of the item\nGet the layout (little- or big-endian) of the item\nCreate a new iterator with a length delimiter\nGet the length of the array, given the item count\nCreate a new item with ranges, width and layout\nCreate a new item array with given ranges, layout, and …\nCreate a new byte iterator with data and a delimiter\nCreate a new field from given ranges\nCreate a new item with given ranges\nCreate a new item array with given ranges\nSkip directly to an offset in the data\nGet the total offset at which the array will read\nBuilder method to parse a byte buffer\nRead the value if possible\nRead a value at a particular index in the data\nConvert output value and write to the buffer\nSet the output value of the item\nSet an index based on field size to read at\nSet an index based on field size to read at\nSet the layout of the field\nSet the layout (little- or big-endian) of the item\nSet the layout (little- or big-endian) of the item\nSet an offset in bytes to read at\nSet an offset in bytes to read at\nSet the width of the field\nSet the width (32- or 64-bit) of the item\nSet the width (32- or 64-bit) of the item\nThe expected size in bytes of the output/input buffers\nGet the size of the item if there is a value\nSkip directly to an offset in the data\nCreate a new iterator with a value delimiter\nGet the width of the field\nGet the width (32- or 64-bit) of the item\nGet the width (32- or 64-bit) of the item\nBuilder method to set an index\nBuilder method to set the last offset for the array\nBuilder method to set the layout of the field\nBuilder method to set the initial layout\nBuilder method to set the initial layout\nBuilder method to set an offset\nBuilder method to add an array offset\nBuilder method to set the initial value\nBuilder method to set the width of the field\nBuilder method to set the initial width\nBuilder method to set the initial width\nWrite the value if there is one\nRange for extracting addresses from init/preinit/fini …\nFurther identifies specific version of ABI\nThe format of the file (1 = 32-bit, 2 = 64-bit)\nEndianness of the file (1 = little, 2 = big)\nLeading byte of the ELF “magic number”, should always …\nThe ASCII representation of the letters ELF\nIdentifies the target operating system ABI\nPadding bytes that should always be filled with zeroes\nVersion of ELF format (always 1)\nSize of the header\nOffset of the entry point for execution (0 if none)\nTarget architecture-specific flags\nSpecifies target instruction set architecture\nSize of an entry in the program header\nNumber of items in the program header\nOffset of the program header within the file\nSize of an entry in the section header\nNumber of items in the section header\nOffset of the section header table\nIndex of the section header that contains section names\nThe type of the object file\nSet to 1 for the original ELF format\nAlignment of the file in memory (0/1 = no alignment, …\nSize in bytes of the segment in the file\nSegment-specific flags\nSize in bytes of the segment in memory\nOffset of the segment in the file\nPhysical address of the segment\nType of the segment\nVirtual address of the segment in memory\nAddend of the relocation, if found\nRelocation info for relocation entry\nOffset of the relocation entry\nThis struct maintains several ranges and returns them …\nVirtual address of the section in memory\nRequired alignment of the section (must be power of 2)\nContains size of entries in bytes, if the section has …\nAttributes of the section header\nExtra information about the section\nSection index of an associated section\nOffset to a string name in the string table\nOffset of the section in the file image\nThe size of the section\nThe type of the section header\nType and binding attributes of the symbol\nIndex of the symbols name in the string table\nVisibility of the symbol\nIndex of the symbol’s section in the section header table\nThe size in bytes of the symbol data\nThe value of the symbol table entry\nGet a reference to the current Range\nGet at mutable reference to the current Range\nCreate an empty set of ranges\nReturns the argument unchanged.\nGet the active Range depending on the current Width\nCalls <code>U::from(self)</code>.\nCreate a new set of ranges given a 32- and 64-bit Range\nGet the expected size in bytes of the current range\nA value could not be converted to a different …\nContains the error value\nCustom error type used everywhere in this crate\nBytes with no nul terminator could not be parsed as …\nCould not parse complex type from primitive\nCould not parse complex type from primitive\nString with no nul terminator could not be parsed as …\nCould not open a file for reading\nThis error will never actually be created\nCould not convert integer to a different integer type\nCString failed to convert to UTF-8 encoded String\nGiven data has missing or wrong values for the action\nA resource could not be found\nContains the success value\nCollection was accessed with an out-of-bounds index\nBinary data could not be parsed into fields\nBytes could not be converted to UTF-8 encoded String\nFailed to convert bytes to a value representation\nFailed to access shared data because Mutex is poisoned\nType alias for ‘Result’ that uses our Error type\nFiled to convert section to a table or array\nFiled to convert type to some specialized type\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe ELF file header parsed from the beginning of the file\nProgram headers extracted from an ELF file.\nSection headers extracted from an ELF file.\nGet the <code>abiversion</code> attribute of the header\nGet the <code>sh_addralign</code> attribute of the header\nGet the <code>sh_address</code> attribute of the header\nGet the <code>p_align</code> attribute of the header\nGet the <code>p_filesz</code> attribute of the header\nGet the <code>sh_size</code> attribute of the header\nGet the <code>ei_class</code> attribute of the header\nGet the <code>ei_data</code> attribute of the header\nGet the <code>e_ehsize</code> attribute of the header\nGet the <code>e_entry</code> attribute of the header\nGet the <code>sh_entsize</code> attribute of the header\nGet the <code>e_type</code> attribute of the header\nGet the <code>p_filesz</code> attribute of the header\nGet the <code>e_flags</code> attribute of the header\nGet the <code>p_flags</code> attribute of the header\nGet the <code>sh_flags</code> attribute of the header\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the <code>sh_info</code> attribute of the header\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the <code>p_type</code> attribute of the header\nGet the <code>sh_type</code> attribute of the header\nGet the layout (little or big-endian) of the header\nGet the layout (little or big-endian) of the header\nGet the layout (little or big-endian) of the header\nGet the <code>sh_link</code> attribute of the header\nGet the <code>e_machine</code> attribute of the header\nGet the <code>ei_magic</code> attribute of the header\nGet the <code>p_memsz</code> attribute of the header\nGet the <code>sh_name</code> attribute of the header\nCreate a new header with given Layout and Width\nCreate a new header with given Layout and Width\nCreate a new header with given Layout and Width\nGet the <code>p_offset</code> attribute of the header\nGet the <code>sh_offset</code> attribute of the header\nGet the <code>ei_osabi</code> attribute of the header\nGet the <code>p_paddr</code> attribute of the header\nParse a header from the provided byte buffer\nParse a header from the provided byte buffer\nParse a header from the provided byte buffer\nParse all headers for a byte array given count, offset etc.\nParse all headers for a byte array given count, offset etc.\nGet the <code>e_phentsize</code> attribute of the header\nGet the <code>e_phnum</code> attribute of the header\nGet the <code>e_phoff</code> attribute of the header\nRead values from a byte buffer\nRead values from a byte buffer\nRead values from a byte buffer\nSet the <code>abiversion</code> attribute of the header\nSet the <code>sh_addralign</code> attribute of the header\nSet the <code>sh_address</code> attribute of the header\nSet the <code>p_align</code> attribute of the header\nSet the <code>p_filesz</code> attribute of the header\nSet the <code>sh_size</code> attribute of the header\nSet the <code>ei_class</code> attribute of the header\nSet the <code>ei_data</code> attribute of the header\nSet the <code>e_ehsize</code> attribute of the header\nSet the <code>e_entry</code> attribute of the header\nSet the <code>sh_entsize</code> attribute of the header\nSet the <code>e_type</code> attribute of the header\nSet the <code>p_filesz</code> attribute of the header\nSet the <code>e_flags</code> attribute of the header\nSet the <code>p_flags</code> attribute of the header\nSet the <code>sh_flags</code> attribute of the header\nSet the <code>sh_info</code> attribute of the header\nSet the <code>p_type</code> attribute of the header\nSet the <code>sh_type</code> attribute of the header\nSet the layout of the header\nSet the layout of the header\nSet the layout of the header\nSet the <code>sh_link</code> attribute of the header\nSet the <code>e_machine</code> attribute of the header\nSet the <code>ei_magic</code> attribute of the header\nSet the <code>p_memsz</code> attribute of the header\nSet the <code>sh_name</code> attribute of the header\nSet the <code>p_offset</code> attribute of the header\nSet the <code>sh_offset</code> attribute of the header\nSet the <code>ei_osabi</code> attribute of the header\nSet the <code>p_paddr</code> attribute of the header\nSet the <code>e_phentsize</code> attribute of the header\nSet the <code>e_phnum</code> attribute of the header\nSet the <code>e_phoff</code> attribute of the header\nSet the <code>e_shentsize</code> attribute of the header\nSet the <code>e_shnum</code> attribute of the header\nSet the <code>e_shoff</code> attribute of the header\nSet the <code>e_shstrndx</code> attribute of the header\nSet the <code>p_vaddr</code> attribute of the header\nSet the <code>ei_version</code> attribute of the header\nSet the width of the header\nSet the width of the header\nSet the width of the header\nGet the <code>e_shentsize</code> attribute of the header\nGet the <code>e_shnum</code> attribute of the header\nGet the <code>e_shoff</code> attribute of the header\nGet the <code>e_shstrndx</code> attribute of the header\nThe size of the header in bytes\nThe size of the header in bytes\nThe size of the header in bytes\nGet the <code>p_vaddr</code> attribute of the header\nGet the <code>ei_version</code> attribute of the header\nGet the width (32 or 64-bit) of the header\nGet the width (32 or 64-bit) of the header\nGet the width (32 or 64-bit) of the header\nWrite values to a byte buffer\nWrite values to a byte buffer\nWrite values to a byte buffer\nA specialization of item for reading addresses from Arrays\nA Relocation item found in relocation tables\nA Relocation item found in relocation tables\nRepresentation of the info field in a Relocation record\nA string item found in string tables\nA Section represented as an immutable Table\nA record that can be extracted from a table section\nA Section represented as a mutable Table\nShared table interface between Table and TableMut\nGet the ‘r_addend’ attribute of the relocation\nAppend an item to the table\nGet an element from the table\nGet an element from the table\nGet an element from the table at a byte offset\nGet an element from the table at a byte offset\nGet a slice of data that represents an item\nGet a slice of data that represents an item\nMake a delimiter given expected entity size\nMake a delimiter given expected entity size\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTrue if items are all the same size\nTrue if items are all the same size\nTrue if items can be different sizes\nTrue if items can be different sizes\nGet the ‘r_info’ attribute of the relocation\nGet the ‘r_info’ attribute of the relocation\nInsert an item into the table\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet all items from the table\nGet all items from the table\nGet an iterator over each item’s binary data\nGet an iterator over each item’s binary data\nGet the ‘kind’ component of the info struct\nGet the layout being used by this table\nGet the layout being used by this table\nGet the number of items in the table\nGet the number of items in the table\nGet the name index of the internal section\nGet the name index of the internal section\nGet the offset of an item from the index\nGet the offset of an item from the index\nGet the ‘r_offset’ attribute of the relocation\nGet the ‘r_offset’ attribute of the relocation\nParse the item directly from the byte array\nParse the item directly from the byte array\nPrepend an item to the table\nRead the item from a byte array\nRemove an item from the table by index\nGet an immutable reference to the internal section\nSet the ‘r_addend’ attribute of the relocation\nSet the ‘r_info’ attribute of the relocation\nSet the ‘r_info’ attribute of the relocation\nSet the ‘kind’ component of the info struct\nSet the layout if necessary\nSet the layout if necessary\nSet the ‘r_offset’ attribute of the relocation\nSet the ‘r_offset’ attribute of the relocation\nSet the string value of the table item\nSet the ‘symbol’ component of the info struct\nSet the internal value\nSet the width if necessary\nSet the width if necessary\nGet the calculated size of the item\nGet the number of bytes in the table\nGet the number of bytes in the table\nGet the string value of the table item\nGet the string value of the table item\nGet the ‘symbol’ component of the info struct\nGet the internal value\nGet the width being used by this table\nGet the width being used by this table\nWrite the item to a byte array")